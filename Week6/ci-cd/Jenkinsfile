pipeline {
    agent any

    environment {
        TF_VAR_FILE = "envs/dev/dev.tfvars"
        TF_DIR = "${WORKSPACE}/Week6"
        SLACK_WEBHOOK_URL = credentials('slack_webhook_url') // optional if using Slack
    }

    stages {
        stage('Checkout SCM') {
            steps {
                echo "üîÑ Checking out code..."
                checkout scm
            }
        }

        stage('Parallel Checks') {
            parallel {
                stage('Terraform Lint') {
                    steps {
                        dir("${TF_DIR}") {
                            echo "üßπ Running Terraform fmt check..."
                            sh "terraform fmt -check -recursive || true"
                        }
                    }
                }

                stage('Security Scan (tfsec)') {
                    steps {
                        dir("${TF_DIR}") {
                            echo "üõ°Ô∏è Running tfsec security scan..."
                            sh "tfsec . || true"
                        }
                    }
                }
            }
        }

        stage('Terraform Init') {
            steps {
                dir("${TF_DIR}") {
                    echo "üöÄ Initializing Terraform..."
                    sh "terraform init -reconfigure -input=false -var-file=${TF_VAR_FILE}"
                }
            }
        }

        stage('Terraform Validate') {
            steps {
                dir("${TF_DIR}") {
                    echo "üîé Validating Terraform configuration..."
                    sh "terraform validate"
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                dir("${TF_DIR}") {
                    echo "üìã Running Terraform Plan..."
                    sh "terraform plan -input=false -var-file=${TF_VAR_FILE} -out=tfplan"
                    sh "terraform show -no-color tfplan > tfplan.txt"
                    archiveArtifacts artifacts: 'Week6/tfplan.txt', fingerprint: true
                }
            }
        }

        stage('Terraform Apply') {
            when { expression { return params.APPLY_INFRA == true } }
            steps {
                dir("${TF_DIR}") {
                    echo "‚ö° Applying Terraform Plan..."
                    sh "terraform apply -input=false tfplan"
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Pipeline finished successfully!"
            script {
                if (env.SLACK_WEBHOOK_URL) {
                    sh """
                    curl -X POST -H 'Content-type: application/json' \
                    --data '{"text": "‚úÖ Terraform Pipeline succeeded for ${env.JOB_NAME} #${env.BUILD_NUMBER}"}' \
                    ${SLACK_WEBHOOK_URL}
                    """
                }
            }
        }

        failure {
            echo "‚ùå Pipeline failed!"
            script {
                if (env.SLACK_WEBHOOK_URL) {
                    sh """
                    curl -X POST -H 'Content-type: application/json' \
                    --data '{"text": "‚ùå Terraform Pipeline failed for ${env.JOB_NAME} #${env.BUILD_NUMBER}"}' \
                    ${SLACK_WEBHOOK_URL}
                    """
                }
            }
        }

        always {
            echo "üîî Pipeline finished!"
        }
    }
}
